// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/database/divisi_database.dart';
import 'core/database/event_database.dart';
import 'core/database/person_database.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2856210051047624666),
      name: 'PersonDatabase',
      lastPropertyId: const obx_int.IdUid(7, 7699047194876484819),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1044072566584168062),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8477870283597203145),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 364417844557502026),
            name: 'divisiId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 5597251594856104144),
            relationTarget: 'DivisiDatabase'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7259818050157503377),
            name: 'sigantureImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8072883543424201001),
            name: 'nomorHp',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7699047194876484819),
            name: 'eventId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 4815145322428315918),
            relationTarget: 'EventDatabase')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1703819473477636000),
      name: 'DivisiDatabase',
      lastPropertyId: const obx_int.IdUid(5, 610159662210117749),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6397143090813261646),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2140423295590653135),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8092190447238036930),
            name: 'acaraId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 6254284601558363811),
            relationTarget: 'EventDatabase')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'person', srcEntity: 'PersonDatabase', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 3096772067571814733),
      name: 'EventDatabase',
      lastPropertyId: const obx_int.IdUid(5, 3228319259335071057),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7535073605002549701),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 376914958802295919),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3833678253230029450),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5388054486649660559),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3228319259335071057),
            name: 'nameDivisi',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'divisi', srcEntity: 'DivisiDatabase', srcField: ''),
        obx_int.ModelBacklink(
            name: 'persons', srcEntity: 'PersonDatabase', srcField: '')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 3096772067571814733),
      lastIndexId: const obx_int.IdUid(6, 4815145322428315918),
      lastRelationId: const obx_int.IdUid(7, 2886979274118191140),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [2026740901415108783],
      retiredIndexUids: const [
        800326072899252199,
        4522288439748752363,
        1518011378208948286
      ],
      retiredPropertyUids: const [
        8445197292447913542,
        5079848249309212500,
        4619519111304567248,
        8510144088319020200,
        6968460822717380324,
        610159662210117749,
        7575315859337820529
      ],
      retiredRelationUids: const [
        7872359878340848195,
        4797825462642805375,
        4290667845591195493,
        255587330564477092,
        2886979274118191140,
        4972966296000211426
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    PersonDatabase: obx_int.EntityDefinition<PersonDatabase>(
        model: _entities[0],
        toOneRelations: (PersonDatabase object) =>
            [object.divisi, object.event],
        toManyRelations: (PersonDatabase object) => {},
        getId: (PersonDatabase object) => object.id,
        setId: (PersonDatabase object, int id) {
          object.id = id;
        },
        objectToFB: (PersonDatabase object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final sigantureImageOffset = fbb.writeString(object.sigantureImage);
          final nomorHpOffset = fbb.writeString(object.nomorHp);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.divisi.targetId);
          fbb.addOffset(3, sigantureImageOffset);
          fbb.addOffset(4, nomorHpOffset);
          fbb.addInt64(6, object.event.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nomorHpParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final sigantureImageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = PersonDatabase(
              id: idParam,
              name: nameParam,
              nomorHp: nomorHpParam,
              sigantureImage: sigantureImageParam);
          object.divisi.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.divisi.attach(store);
          object.event.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.event.attach(store);
          return object;
        }),
    DivisiDatabase: obx_int.EntityDefinition<DivisiDatabase>(
        model: _entities[1],
        toOneRelations: (DivisiDatabase object) => [object.acara],
        toManyRelations: (DivisiDatabase object) => {
              obx_int.RelInfo<PersonDatabase>.toOneBacklink(3, object.id,
                  (PersonDatabase srcObject) => srcObject.divisi): object.person
            },
        getId: (DivisiDatabase object) => object.id,
        setId: (DivisiDatabase object, int id) {
          object.id = id;
        },
        objectToFB: (DivisiDatabase object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.acara.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = DivisiDatabase(id: idParam, name: nameParam);
          object.acara.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.acara.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<DivisiDatabase>(
              object.person,
              store,
              obx_int.RelInfo<PersonDatabase>.toOneBacklink(3, object.id,
                  (PersonDatabase srcObject) => srcObject.divisi));
          return object;
        }),
    EventDatabase: obx_int.EntityDefinition<EventDatabase>(
        model: _entities[2],
        toOneRelations: (EventDatabase object) => [],
        toManyRelations: (EventDatabase object) => {
              obx_int.RelInfo<DivisiDatabase>.toOneBacklink(3, object.id,
                  (DivisiDatabase srcObject) => srcObject.acara): object.divisi,
              obx_int.RelInfo<PersonDatabase>.toOneBacklink(7, object.id,
                  (PersonDatabase srcObject) => srcObject.event): object.persons
            },
        getId: (EventDatabase object) => object.id,
        setId: (EventDatabase object, int id) {
          object.id = id;
        },
        objectToFB: (EventDatabase object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          final nameDivisiOffset = fbb.writeString(object.nameDivisi);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.addOffset(4, nameDivisiOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final nameDivisiParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final object = EventDatabase(
              id: idParam,
              name: nameParam,
              description: descriptionParam,
              nameDivisi: nameDivisiParam,
              date: dateParam);
          obx_int.InternalToManyAccess.setRelInfo<EventDatabase>(
              object.divisi,
              store,
              obx_int.RelInfo<DivisiDatabase>.toOneBacklink(
                  3, object.id, (DivisiDatabase srcObject) => srcObject.acara));
          obx_int.InternalToManyAccess.setRelInfo<EventDatabase>(
              object.persons,
              store,
              obx_int.RelInfo<PersonDatabase>.toOneBacklink(
                  7, object.id, (PersonDatabase srcObject) => srcObject.event));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [PersonDatabase] entity fields to define ObjectBox queries.
class PersonDatabase_ {
  /// See [PersonDatabase.id].
  static final id =
      obx.QueryIntegerProperty<PersonDatabase>(_entities[0].properties[0]);

  /// See [PersonDatabase.name].
  static final name =
      obx.QueryStringProperty<PersonDatabase>(_entities[0].properties[1]);

  /// See [PersonDatabase.divisi].
  static final divisi = obx.QueryRelationToOne<PersonDatabase, DivisiDatabase>(
      _entities[0].properties[2]);

  /// See [PersonDatabase.sigantureImage].
  static final sigantureImage =
      obx.QueryStringProperty<PersonDatabase>(_entities[0].properties[3]);

  /// See [PersonDatabase.nomorHp].
  static final nomorHp =
      obx.QueryStringProperty<PersonDatabase>(_entities[0].properties[4]);

  /// See [PersonDatabase.event].
  static final event = obx.QueryRelationToOne<PersonDatabase, EventDatabase>(
      _entities[0].properties[5]);
}

/// [DivisiDatabase] entity fields to define ObjectBox queries.
class DivisiDatabase_ {
  /// See [DivisiDatabase.id].
  static final id =
      obx.QueryIntegerProperty<DivisiDatabase>(_entities[1].properties[0]);

  /// See [DivisiDatabase.name].
  static final name =
      obx.QueryStringProperty<DivisiDatabase>(_entities[1].properties[1]);

  /// See [DivisiDatabase.acara].
  static final acara = obx.QueryRelationToOne<DivisiDatabase, EventDatabase>(
      _entities[1].properties[2]);

  /// see [DivisiDatabase.person]
  static final person = obx.QueryBacklinkToMany<PersonDatabase, DivisiDatabase>(
      PersonDatabase_.divisi);
}

/// [EventDatabase] entity fields to define ObjectBox queries.
class EventDatabase_ {
  /// See [EventDatabase.id].
  static final id =
      obx.QueryIntegerProperty<EventDatabase>(_entities[2].properties[0]);

  /// See [EventDatabase.name].
  static final name =
      obx.QueryStringProperty<EventDatabase>(_entities[2].properties[1]);

  /// See [EventDatabase.description].
  static final description =
      obx.QueryStringProperty<EventDatabase>(_entities[2].properties[2]);

  /// See [EventDatabase.date].
  static final date =
      obx.QueryDateProperty<EventDatabase>(_entities[2].properties[3]);

  /// See [EventDatabase.nameDivisi].
  static final nameDivisi =
      obx.QueryStringProperty<EventDatabase>(_entities[2].properties[4]);

  /// see [EventDatabase.divisi]
  static final divisi = obx.QueryBacklinkToMany<DivisiDatabase, EventDatabase>(
      DivisiDatabase_.acara);

  /// see [EventDatabase.persons]
  static final persons = obx.QueryBacklinkToMany<PersonDatabase, EventDatabase>(
      PersonDatabase_.event);
}
